service:
  name: bitwarden-serverless
  # When using the `prod` environment the DynamoDB tables will not be
  # delete when removing the Cloudformation stack. It's better to risk
  # having a forgotten table running than losing data
  tableDeletionPolicy:
    prod: Delete
    other: Delete
# package:
#   individually: true
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
custom:
  apigwBinary:
    types:
      - 'multipart/form-data'
      - '*/*'
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    # keepOutputDirectory: true
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs10.x
  memorySize: 256
  timeout: 10
  environment:
    BITWARDEN_TABLE: ${self:service}-${self:provider.stage}-bitwarden
    ATTACHMENTS_BUCKET: ${self:service}-${self:provider.stage}-v1-storage
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:GetObject'
        - 's3:GetObjectAcl'
        - 's3:PutObject'
        - 's3:PutObjectAcl'
        - 's3:DeleteObject'
      Resource:
        - "arn:aws:s3:::${self:provider.environment.ATTACHMENTS_BUCKET}/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BITWARDEN_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BITWARDEN_TABLE}/index/UserEmailIndex"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BITWARDEN_TABLE}/index/InvertedIndex"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BITWARDEN_TABLE}/index/RefreshTokenDeviceIndex"
  usagePlan:
    throttle:
      burstLimit: 300 # request burst
      rateLimit: 5 # requests per second

default_cors: &default_cors
  cors:
    origin: "*"
    headers:
      - Content-Type
      - Authorization
      - Accept
      # Special serverless header being sent
      - Device-type
      - Pragma
      - Cache-Control
    allowMethods: "GET, POST, OPTIONS, PUT, DELETE"

functions:
  # Identity endpoints

  login:
    handler: src/login.handler
    events:
      - http:
          method: post
          <<: *default_cors
          path: identity/connect/token

  # Accounts endpoints

  prelogin:
    handler: src/prelogin.handler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/accounts/prelogin
  profile:
    handler: src/accounts.profileHandler
    events:
      - http:
          method: get
          <<: *default_cors
          path: api/accounts/profile
  profile_put:
    handler: src/accounts.putProfileHandler
    events:
      - http:
          method: put
          <<: *default_cors
          path: api/accounts/profile
  keys:
    handler: src/keys.handler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/accounts/keys
  register:
    handler: src/register.handler
    environment:
      DISABLE_USER_REGISTRATION: ${env:DISABLE_USER_REGISTRATION, 'false'}
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/accounts/register
  accounts_revision_date:
    handler: src/accounts.revisionDateHandler
    events:
      - http:
          method: get
          <<: *default_cors
          path: api/accounts/revision-date

  # Other endpoints, ciphers and data

  sync:
    handler: src/sync.handler
    events:
      - http:
          method: get
          <<: *default_cors
          path: api/sync
  cipher_post:
    handler: src/ciphers.postHandler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/ciphers
  cipher_put:
    handler: src/ciphers.putHandler
    events:
      - http:
          method: put
          <<: *default_cors
          path: api/ciphers/{uuid}
  cipher_delete:
    handler: src/ciphers.deleteHandler
    events:
      - http:
          method: delete
          <<: *default_cors
          path: api/ciphers/{uuid}
  cipher_attachment_post:
    handler: src/attachments.postHandler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/ciphers/{uuid}/attachment
  cipher_attachment_delete:
    handler: src/attachments.deleteHandler
    events:
      - http:
          method: delete
          <<: *default_cors
          path: api/ciphers/{uuid}/attachment/{attachmentId}
  cipher_attachment_get:
    handler: src/attachments.getHandler
    events:
      - http:
          method: get
          <<: *default_cors
          path: api/ciphers/{uuid}/attachment/{attachmentId}
  folder_post:
    handler: src/folders.postHandler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/folders
  folder_put:
    handler: src/folders.putHandler
    events:
      - http:
          method: put
          <<: *default_cors
          path: api/folders/{uuid}
  folder_delete:
    handler: src/folders.deleteHandler
    events:
      - http:
          method: delete
          <<: *default_cors
          path: api/folders/{uuid}
  # migrate:
  #   handler: src/migrate.migrateHandler
  #   timeout: 300
  #   memorySize: 1024
  two_factor_get:
    handler: src/two_factor.getHandler
    events:
      - http:
          method: get
          <<: *default_cors
          path: api/two-factor
  two_factor_disable:
    handler: src/two_factor.disableTwofactorHandler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/disable
      - http:
          method: put
          <<: *default_cors
          path: api/two-factor/disable
  two_factor_get_authenticator:
    handler: src/two_factor.getAuthenticatorHandler
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/get-authenticator
  two_factor_activate_authenticator:
    handler: src/two_factor.activateAuthenticatorHandler
    events:
      - http:
          method: put
          <<: *default_cors
          path: api/two-factor/authenticator
  two_factor_get_recover:
    handler: src/two_factor.getRecoveryCode
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/get-recover
  two_factor_recover:
    handler: src/two_factor.recover
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/recover
  two_factor_getu2f:
    handler: src/two_factor.getU2f
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/get-u2f
  two_factor_getu2f_challenge:
    handler: src/two_factor.generateU2fChallenge
    events:
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/get-u2f-challenge
  two_factor_u2f:
    handler: src/two_factor.activateU2f
    events:
      - http:
          method: put
          <<: *default_cors
          path: api/two-factor/u2f
      - http:
          method: post
          <<: *default_cors
          path: api/two-factor/u2f
  two_factor_delete_u2f:
    handler: src/two_factor.deleteU2f
    events:
      - http:
          method: delete
          <<: *default_cors
          path: api/two-factor/u2f
  import:
    handler: src/import.postHandler
    timeout: 30
    events:
      - http:
          method: post
          <<: *default_cors
          path: /api/ciphers/import
  icons:
    handler: src/icons.handler
    events:
      - http:
          method: get
          path: /icons/{domain}/icon.png
  default:
    handler: src/default.handler
    events:
      - http:
          method: any
          <<: *default_cors
          path: /{fallback+}

resources:
  Resources:
    BitwardenTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}
      Properties:
        TableName: ${self:provider.environment.BITWARDEN_TABLE}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: refreshToken
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        GlobalSecondaryIndexes:
          - IndexName: InvertedIndex
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: pk
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: UserEmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
          - IndexName: RefreshTokenDeviceIndex
            KeySchema:
              - AttributeName: refreshToken
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: ${self:service.tableDeletionPolicy.${self:provider.stage}, self:service.tableDeletionPolicy.other}
      Properties:
        VersioningConfiguration:
          Status: Enabled
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: aws:kms
        BucketName: ${self:provider.environment.ATTACHMENTS_BUCKET}